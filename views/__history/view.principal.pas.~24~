unit view.principal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.Imaging.pngimage,
  Vcl.Imaging.jpeg, Vcl.StdCtrls, Vcl.Buttons, Data.DB, Vcl.Grids, Vcl.DBGrids,
  Vcl.Samples.Spin, service.cadastro, view.base.listas, view.caixa,
  provider.functions, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Comp.DataSet, FireDAC.Comp.Client, view.formasPGTO,
  view.fundo, Vcl.Menus;

type
  TViewPrincipal = class(TForm)
    pnlTopo: TPanel;
    pnlInfosEmpresa: TPanel;
    pnlImg: TPanel;
    Image1: TImage;
    lblEmpresa: TLabel;
    lblHoras: TLabel;
    pnlDataLocal: TPanel;
    pnlCaixa: TPanel;
    lblCaixaLivre: TLabel;
    pnlBtnFechar: TPanel;
    btnFechar: TSpeedButton;
    pnlRodape: TPanel;
    pnlMenu: TPanel;
    btnCaixa: TSpeedButton;
    pnlSobre: TPanel;
    btnFaturar: TSpeedButton;
    pnlConsultaProduto: TPanel;
    pnlProdutos: TPanel;
    pnlTitulo: TPanel;
    lblTituloSubtotal: TLabel;
    pnlTituloProduto: TPanel;
    lblTituloProduto: TLabel;
    pnlTotalPagar: TPanel;
    lblTotal: TLabel;
    pnlPrecoTotalPagar: TPanel;
    DBGrid: TDBGrid;
    Image2: TImage;
    pnlDetalhes: TPanel;
    lblNomeProduto: TLabel;
    lblTituloQuantidade: TLabel;
    lblTituloValorUnitario: TLabel;
    edtValorUnitario: TEdit;
    dsItens: TDataSource;
    edtCodigoBarras: TEdit;
    edtQuantidade: TEdit;
    edtSubtotal: TEdit;
    edtTotalPagar: TEdit;
    FDMemTable_itens: TFDMemTable;
    FDMemTable_itensCOD_ITEM: TIntegerField;
    FDMemTable_itensQTD_PRODUTO: TCurrencyField;
    FDMemTable_itensVLR_UNITARIO: TCurrencyField;
    FDMemTable_itensVLR_DESCONTO: TCurrencyField;
    FDMemTable_itensVLR_TOTAL: TCurrencyField;
    FDMemTable_itensNOME_PRODUTO: TStringField;
    Timer: TTimer;
    PopupMenu: TPopupMenu;
    Deletaritem1: TMenuItem;
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btnFecharClick(Sender: TObject);
    procedure btnCaixaClick(Sender: TObject);
    procedure edtCodigoBarrasExit(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure DimensionarGrid(dbg: TDBGrid);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure edtQuantidadeExit(Sender: TObject);
    procedure FDMemTable_itensAfterPost(DataSet: TDataSet);
    procedure DBGridDrawDataCell(Sender: TObject; const Rect: TRect;
      Field: TField; State: TGridDrawState);
    procedure TimerTimer(Sender: TObject);
    procedure btnFaturarClick(Sender: TObject);
    procedure Deletaritem1Click(Sender: TObject);
  private

    var
    TotalVenda: Double;

  public
    { Public declarations }
  end;

var
  ViewPrincipal: TViewPrincipal;

implementation

{$R *.dfm}

procedure TViewPrincipal.btnFecharClick(Sender: TObject);
begin
  Self.Close;
end;

procedure TViewPrincipal.btnCaixaClick(Sender: TObject);
begin // abre caixa usando uma função
  CriaForm(TViewCaixa, ViewCaixa);
end;

procedure TViewPrincipal.btnFaturarClick(Sender: TObject);
begin // abre faturar usando uma função

   ViewFormasPGTO := TViewFormasPGTO.Create(Self);
   try
      ViewFormasPGTO.ValorVenda := StrToFloatDef(edtTotalPagar.Text, 0);

      ViewFormasPGTO.FDMemTable_itensVenda.CopyDataSet(FDMemTable_itens); // copia um memtable para o outro

      ViewFundo.Show;
      ViewFormasPGTO.ShowModal;

      if ViewFormasPGTO.ModalResult = mrOk then
      begin
        FDMemTable_itens.EmptyDataSet;
        edtSubtotal.Clear;
        edtTotalPagar.Clear;
        edtCodigoBarras.SetFocus;
      end;

   finally
      ViewFundo.Hide;
      FreeAndNil(ViewFormasPGTO);
   end;


  // CriaForm(TViewFormasPGTO, ViewFormasPGTO);
end;

procedure TViewPrincipal.edtCodigoBarrasExit(Sender: TObject); // produto em tela ao clicar fora do edt
var
  ValorUnitario, QTD, ValorSubtotal: Double;

begin
  if Length(edtCodigoBarras.Text) > 0 then
  begin
    ServiceCadastro.Get_Produtos(edtCodigoBarras.Text);

    edtValorUnitario.Text := FloatToStr(ServiceCadastro.FDQuery_produtosPR2_VENDAVISTA.AsFloat); // passa o valor unitário do produto para o edt
    ValorUnitario         := ServiceCadastro.FDQuery_produtosPR2_VENDAVISTA.AsFloat;
    QTD                   := StrToFloatDef(edtQuantidade.Text, 1);
    ValorSubtotal         := QTD * ValorUnitario;

    edtSubtotal.Text      := FloatToStr(ValorSubtotal);


    // inserindo do memtable para a grid

    FDMemTable_itens.Open;
    FDMemTable_itens.Insert;
    FDMemTable_itensCOD_ITEM.AsInteger    := ServiceCadastro.FDQuery_produtosPR1_CODIGO.AsInteger;
    FDMemTable_itensNOME_PRODUTO.AsString := ServiceCadastro.FDQuery_produtosPR1_NOMECOMPLETO.AsString;
    FDMemTable_itensQTD_PRODUTO.AsFloat   := QTD;
    FDMemTable_itensVLR_UNITARIO.AsFloat  := ValorUnitario;
    FDMemTable_itensVLR_DESCONTO.AsFloat  := 0;
    FDMemTable_itensVLR_TOTAL.AsFloat     := ValorSubtotal;
    FDMemTable_itens.Post;

    // limpando os edts, após finalizar o processo

    edtQuantidade.Text    := '1';
    edtValorUnitario.Text := '0';

    edtCodigoBarras.Clear;
    edtCodigoBarras.SetFocus;
  end;
end;

procedure TViewPrincipal.edtQuantidadeExit(Sender: TObject);
begin
  edtCodigoBarras.SetFocus;  // quando sair do edtquantidade, volta ao edtcodigodebarras
end;

procedure TViewPrincipal.FDMemTable_itensAfterPost(DataSet: TDataSet);
begin // somando depois do 'post' para salvar
  TotalVenda := 0;

  FDMemTable_itens.DisableControls;
  FDMemTable_itens.First;
  while FDMemTable_itens.Eof do
  begin
    FDMemTable_itens.Next;
  end;
  FDMemTable_itens.EnableControls;

  TotalVenda := TotalVenda + FDMemTable_itensVLR_TOTAL.AsFloat;

  edtTotalPagar.Text := FloatToStr(TotalVenda);
end;

procedure TViewPrincipal.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState); // habilitar 'true' em keypreview
begin

    case key of
    VK_ESCAPE: begin
      Self.Close;
    end;
  end;

      case key of
    VK_F2: begin
      btnCaixa.Click;
    end;
  end;


      case key of
    VK_F3: begin
      btnFaturar.Click;
    end;
  end;

end;

procedure TViewPrincipal.FormKeyPress(Sender: TObject; var Key: Char);
begin
  if key = #43 then
  begin
    key := #0; // invalida a tecla pressionada anteriormente
    edtQuantidade.SetFocus;
  end;
end;

procedure TViewPrincipal.FormShow(Sender: TObject);
begin // abrir a tela já com foco em 'código de barras'
    if edtCodigoBarras.Visible and edtCodigoBarras.Enabled then
    edtCodigoBarras.SetFocus;
end;

procedure TViewPrincipal.TimerTimer(Sender: TObject);
begin // configurando a hora do sistema
  lblHoras.Caption := TimeToStr(Time);
end;

procedure TViewPrincipal.FormResize(Sender: TObject);
begin // dimensionar a grid automaticamente
    DimensionarGrid(DBGrid);
end;

procedure TViewPrincipal.DBGridDrawDataCell(Sender: TObject; const Rect: TRect;
  Field: TField; State: TGridDrawState); // trocar a cor da grid
begin
//  DBGrid.Canvas.Brush.Color := clWhite;
//  DBGrid.Canvas.Brush.Color := clBlack;
//  DBGrid.Canvas.FillRect(Rect);
//  TDBGrid(Sender).DefaultDrawColumnCell(Rect,DataCol,Column,State);
end;

procedure TViewPrincipal.Deletaritem1Click(Sender: TObject);
begin // deletar item
  FDMemTable_itens.Delete;
end;

procedure TViewPrincipal.DimensionarGrid(dbg: TDBGrid);
type // dimensionar a grid automaticamente
  TArray = Array of Integer;
    procedure AjustarColumns(Swidth, TSize: Integer; Asize: TArray);
  var
  idx: Integer;
  begin
    if TSize = 0 then
    begin
      TSize := dbg.Columns.count;
      for idx := 0 to dbg.Columns.count - 1 do
      dbg.Columns[idx].Width := (dbg.Width - dbg.Canvas.TextWidth('AAAAAA')
      ) div TSize
    end
  else
    for idx := 0 to dbg.Columns.count - 1 do
    dbg.Columns[idx].Width := dbg.Columns[idx].Width +
    (Swidth * Asize[idx] div TSize);
  end;

  var
  idx, Twidth, TSize, Swidth: Integer;
  AWidth: TArray;
  Asize: TArray;
  NomeColuna: String;

  begin
    SetLength(AWidth, dbg.Columns.count);
    SetLength(Asize, dbg.Columns.count);
    Twidth := 0;
    TSize := 0;
    for idx := 0 to dbg.Columns.count - 1 do
      begin
      NomeColuna := dbg.Columns[idx].Title.Caption;
      dbg.Columns[idx].Width := dbg.Canvas.TextWidth
      (dbg.Columns[idx].Title.Caption + 'A');
      AWidth[idx] := dbg.Columns[idx].Width;
      Twidth := Twidth + AWidth[idx];

      if Assigned(dbg.Columns[idx].Field) then
      Asize[idx] := dbg.Columns[idx].Field.Size
      else
      Asize[idx] := 1;

      TSize := TSize + Asize[idx];
    end;

  if TDBGridOption.dgColLines in dbg.Options then
  Twidth := Twidth + dbg.Columns.count;

  // adiciona a largura da coluna indicada do cursor
  if TDBGridOption.dgIndicator in dbg.Options then
  Twidth := Twidth + IndicatorWidth;

  Swidth := dbg.ClientWidth - Twidth;
  AjustarColumns(Swidth, TSize, Asize);
  end;

end.
